<[1.1]>-----------------------------------------------------------------------------------------------------------------------------------

CREATE DATABASE PracownicyDB;

USE PracownicyDB;

-- Tabela Ludzie
CREATE TABLE Ludzie
(
    PESEL CHAR(11) PRIMARY KEY,
    imie VARCHAR(30) NOT NULL,
    nazwisko VARCHAR(30) NOT NULL,
    data_urodzenia DATE NOT NULL,
    plec ENUM('K', 'M') NOT NULL,
    CONSTRAINT check_pesel CHECK
    (
        PESEL REGEXP '^[0-9]+$' AND
        (
            (SUBSTR(CAST(YEAR(data_urodzenia) AS CHAR), 1, 2) = '19' AND
            CAST(SUBSTR(PESEL, 3, 2) AS INT) = MONTH(data_urodzenia))
            OR
            (SUBSTR(CAST(YEAR(data_urodzenia) AS CHAR), 1, 2) = '20' AND
            CAST(SUBSTR(PESEL, 3, 2) AS INT) = 20 + MONTH(data_urodzenia))
        ) AND
        SUBSTR(CAST(YEAR(data_urodzenia) AS CHAR), 3, 2) = SUBSTR(PESEL, 1, 2) AND
        DAY(data_urodzenia) = CAST(SUBSTR(PESEL, 5, 2) AS INT) AND
        (
            (CAST(SUBSTR(PESEL, 10, 1) AS INT) % 2 = 0 AND
            plec = 'K')
            OR
            (CAST(SUBSTR(PESEL, 10, 1) AS INT) % 2 = 1 AND
            plec = 'M')
        )
    )
);

-- Tabela Zawody
CREATE TABLE Zawody 
(
    zawod_id INT AUTO_INCREMENT PRIMARY KEY,
    nazwa VARCHAR(50) NOT NULL,
    pensja_min FLOAT NOT NULL CHECK (pensja_min >= 0),
    pensja_max FLOAT NOT NULL CHECK (pensja_max > pensja_min)
);

-- Tabela Pracownicy
CREATE TABLE Pracownicy 
(
    PESEL CHAR(11),
    zawod_id INT,
    pensja FLOAT NOT NULL CHECK (pensja >= 0),
    FOREIGN KEY (PESEL) REFERENCES Ludzie(PESEL),
    FOREIGN KEY (zawod_id) REFERENCES Zawody(zawod_id)
);

-- Funkcja na PESEL
DELIMITER //

CREATE FUNCTION GenerujPESEL(data_urodzenia DATE, plec ENUM('K', 'M'))
RETURNS CHAR(11)
DETERMINISTIC
BEGIN
    DECLARE pesel CHAR(11);
    DECLARE rok INT;
    DECLARE miesiac INT;
    DECLARE dzien INT;
    DECLARE liczba_porzadkowa INT;
    DECLARE cyfra_kontrolna INT;
    DECLARE suma INT;

    -- Wyekstraktuj rok wmiesiąc dzień
    SET rok = YEAR(data_urodzenia);
    SET miesiac = MONTH(data_urodzenia);
    SET dzien = DAY(data_urodzenia);

    -- Miesiąc
    IF rok >= 2000 THEN
        SET miesiac = miesiac + 20;
    END IF;

    -- Pierwsze 6 cyfr
    SET pesel = CONCAT(LPAD(rok % 100, 2, '0'), LPAD(miesiac, 2, '0'), LPAD(dzien, 2, '0'));

    -- Płeć
    IF plec = 'K' THEN
        SET liczba_porzadkowa = FLOOR(RAND() * 500) * 2; -- Even for women
    ELSE
        SET liczba_porzadkowa = FLOOR(RAND() * 500) * 2 + 1; -- Odd for men
    END IF;

    SET pesel = CONCAT(pesel, LPAD(liczba_porzadkowa, 4, '0'));

    -- Liczba kontrolna
    SET suma = 1 * CAST(SUBSTRING(pesel, 1, 1) AS UNSIGNED) +
               3 * CAST(SUBSTRING(pesel, 2, 1) AS UNSIGNED) +
               7 * CAST(SUBSTRING(pesel, 3, 1) AS UNSIGNED) +
               9 * CAST(SUBSTRING(pesel, 4, 1) AS UNSIGNED) +
               1 * CAST(SUBSTRING(pesel, 5, 1) AS UNSIGNED) +
               3 * CAST(SUBSTRING(pesel, 6, 1) AS UNSIGNED) +
               7 * CAST(SUBSTRING(pesel, 7, 1) AS UNSIGNED) +
               9 * CAST(SUBSTRING(pesel, 8, 1) AS UNSIGNED) +
               1 * CAST(SUBSTRING(pesel, 9, 1) AS UNSIGNED) +
               3 * CAST(SUBSTRING(pesel, 10, 1) AS UNSIGNED);

    SET cyfra_kontrolna = (10 - (suma MOD 10)) MOD 10;

    SET pesel = CONCAT(pesel, cyfra_kontrolna);

    RETURN pesel;
END//

DELIMITER ;


<[1.2]>-----------------------------------------------------------------------------------------------------------------------------------

INSERT INTO Zawody (nazwa, pensja_min, pensja_max)
VALUES
('Polityk', 5000, 15000),
('Nauczyciel', 3000, 7000),
('Lekarz', 6000, 20000),
('Informatyk', 5000, 18000);


INSERT INTO Ludzie (PESEL, imie, nazwisko, data_urodzenia, plec)
VALUES
-- 5 osób niepełnoletnich
(GenerujPESEL('2010-02-01', 'K'), 'Anna', 'Kowalska', '2010-02-01', 'K'),
(GenerujPESEL('2012-03-02', 'M'), 'Jan', 'Nowak', '2012-03-02', 'M'),
(GenerujPESEL('2009-04-01', 'K'), 'Maria', 'Wiśniewska', '2009-04-01', 'K'),
(GenerujPESEL('2011-05-01', 'M'), 'Paweł', 'Zieliński', '2011-05-01', 'M'),
(GenerujPESEL('2013-06-01', 'K'), 'Zofia', 'Kamińska', '2013-06-01', 'K'),

-- 2 osoby pełnoletnie poniżej 60 lat
(GenerujPESEL('1976-02-03', 'M'), 'Krzysztof', 'Kowalski', '1976-02-03', 'M'),
(GenerujPESEL('1982-03-04', 'K'), 'Ewa', 'Nowakowska', '1982-03-04', 'K'),

-- 2 osoby w wieku 60 lat i starsze
(GenerujPESEL('1944-12-01', 'M'), 'Józef', 'Kaczmarek', '1944-12-01', 'M'),
(GenerujPESEL('1945-03-01', 'K'), 'Helena', 'Woźniak', '1945-03-01', 'K');



DELIMITER ##

CREATE OR REPLACE PROCEDURE Przypisz_zawody()
BEGIN
    DECLARE done BOOLEAN DEFAULT FALSE;

    DECLARE ludz_PESEL CHAR(11);
    DECLARE ludz_data_urodzenia DATE;
    DECLARE ludz_plec ENUM('K', 'M');
    DECLARE ludz_wiek INT;
    DECLARE ludz_zawod_id INT;
    DECLARE ludz_pensja FLOAT;

    DECLARE pensja_minimalna FLOAT;
    DECLARE pensja_maxymalna FLOAT;

    DECLARE ludzie_cursor CURSOR FOR
        (SELECT PESEL, data_urodzenia, plec
        FROM Ludzie
        WHERE DATEDIFF(CURDATE(), data_urodzenia) / 365.25 >= 18);

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN ludzie_cursor;
   
    ludzie: LOOP
        FETCH ludzie_cursor INTO ludz_PESEL, ludz_data_urodzenia, ludz_plec;
        IF done THEN
            LEAVE ludzie;
        END IF;

        SET ludz_wiek = DATEDIFF(CURDATE(), ludz_data_urodzenia) / 365.25;
       
        IF ((ludz_plec = 'M' AND ludz_wiek > 65) OR (ludz_plec = 'K' AND ludz_wiek > 60)) THEN
            SELECT zawod_id, pensja_min, pensja_max
                INTO ludz_zawod_id, pensja_minimalna, pensja_maxymalna
                FROM Zawody
                WHERE nazwa != "Lekarz"
                ORDER BY RAND()
                LIMIT 1;
        ELSE
            SELECT zawod_id, pensja_min, pensja_max
                INTO ludz_zawod_id, pensja_minimalna, pensja_maxymalna
                FROM Zawody
                ORDER BY RAND()
                LIMIT 1;
        END IF;

        SET ludz_pensja = pensja_minimalna + RAND() * (pensja_maxymalna - pensja_minimalna);
       
        INSERT INTO Pracownicy (PESEL, zawod_id, pensja)
        VALUES (ludz_PESEL, ludz_zawod_id, ludz_pensja);
    END LOOP;

    CLOSE ludzie_cursor;

END ##

DELIMITER ;


<[2.1]>-----------------------------------------------------------------------------------------------------------------------------------

CREATE INDEX idx_plec_imie ON Ludzie(plec, imie);
CREATE INDEX idx_pensja ON Pracownicy(pensja);

EXPLAIN SELECT * FROM Ludzie WHERE plec = 'K' AND imie LIKE 'A%';
EXPLAIN SELECT * FROM Ludzie WHERE plec = 'K';
EXPLAIN SELECT * FROM Ludzie WHERE imie LIKE 'K%';
EXPLAIN SELECT * FROM Pracownicy WHERE pensja < 2000;

EXPLAIN SELECT * 
FROM Pracownicy p 
JOIN Ludzie l ON p.PESEL = l.PESEL
JOIN Zawody z ON p.zawod_id = z.zawod_id
WHERE z.nazwa = 'informatyk' AND l.plec = 'M' AND p.pensja > 10000;

<[3.1]>-----------------------------------------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE PROCEDURE DodajPodwyzke(
    IN nazwa_zawodu VARCHAR(50)
)
BEGIN
    DECLARE przekroczono_widelki BOOLEAN DEFAULT FALSE;

    -- Rozpoczęcie transakcji
    START TRANSACTION;

    -- Sprawdzenie, czy podwyżka dla któregoś pracownika przekroczy widełki
    SELECT TRUE INTO przekroczono_widelki
    FROM Pracownicy p
    JOIN Zawody z ON p.zawod_id = z.zawod_id
    WHERE z.nazwa = nazwa_zawodu
      AND (p.pensja * 1.05) > z.pensja_max;

    -- Jeśli widełki zostały przekroczone, wycofaj transakcję
    IF przekroczono_widelki THEN
        ROLLBACK;
    ELSE
        -- Zwiększ pensje o 5% dla pracowników tego zawodu w ramach widełek
        UPDATE Pracownicy p
        JOIN Zawody z ON p.zawod_id = z.zawod_id
        SET p.pensja = LEAST(p.pensja * 1.05, z.pensja_max)
        WHERE z.nazwa = nazwa_zawodu;

        -- Zatwierdzenie transakcji
        COMMIT;
    END IF;
END$$

DELIMITER ;

<[4.1]>-----------------------------------------------------------------------------------------------------------------------------------

DELIMITER $$

-- Tworzymy procedurę do dynamicznego zapytania
CREATE PROCEDURE LiczbaKobietWZawodzie(
    IN nazwa_zawodu VARCHAR(50)
)
BEGIN
    -- Zmienna na dynamiczne zapytanie
    DECLARE stmt TEXT;

    -- Tworzenie dynamicznego zapytania
    SET stmt = CONCAT(
        'SELECT COUNT(*) AS liczba_kobiet ',
        'FROM Pracownicy p ',
        'JOIN Ludzie l ON p.PESEL = l.PESEL ',
        'JOIN Zawody z ON p.zawod_id = z.zawod_id ',
        'WHERE l.plec = ''K'' AND z.nazwa = ?'
    );

    -- Przygotowanie i wykonanie zapytania
    PREPARE dynamic_query FROM stmt;
    EXECUTE dynamic_query USING nazwa_zawodu;
    DEALLOCATE PREPARE dynamic_query;
END$$

DELIMITER ;

<[5.1]>-----------------------------------------------------------------------------------------------------------------------------------

mysqldump -u root -p PracownicyDB > backupPracownicyDB.sql
DROP DATABASE nazwa_bazy_danych;
mysql -u root -p < backupPracownicyDB.sql

Backup pełny towrzy cały, różnicowy tylko zmiany od ostatniego backupu

<[6.1]>-----------------------------------------------------------------------------------------------------------------------------------

• SQL Injection (intro)

• SQL Injection (advanced)

• SQL Injection (mitigation) 
